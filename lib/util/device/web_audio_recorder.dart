import 'dart:async';
import 'dart:html' as html;
import 'dart:typed_data';

class WebAudioRecorder {
  html.MediaRecorder? _mediaRecorder;
  List<html.Blob> _audioChunks = [];
  late html.MediaStream _mediaStream;

  Future<void> startRecording() async {
    try {
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
      _mediaStream = await html.window.navigator.mediaDevices!
          .getUserMedia({"audio": true});

      // –°–æ–∑–¥–∞–µ–º MediaRecorder
      _mediaRecorder = html.MediaRecorder(_mediaStream);
      _audioChunks.clear();

      // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ dataavailable –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
      _mediaRecorder!.addEventListener('dataavailable', (event) {
        final blobEvent = event as html.BlobEvent;
        if (blobEvent.data != null) {
          _audioChunks.add(blobEvent.data!);
        }
      });

      // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
      _mediaRecorder!.start();
      print("üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞–ª–∞—Å—å...");
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É: $e");
    }
  }

  Future<Uint8List?> stopRecording() async {
    if (_mediaRecorder != null && _mediaRecorder!.state == "recording") {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
      _mediaRecorder!.stop();

      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
      await Future.delayed(Duration(milliseconds: 100));

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
      _mediaStream.getTracks().forEach((track) => track.stop());

      if (_audioChunks.isNotEmpty) {
        // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        final audioBlob = html.Blob(_audioChunks, 'audio/wav');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Blob –≤ Uint8List
        final audioData = await _blobToUint8List(audioBlob);

        print("üé§ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.");
        return audioData;
      } else {
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.");
        return null;
      }
    }
    return null;
  }

  Future<Uint8List> _blobToUint8List(html.Blob blob) async {
    final reader = html.FileReader();
    final completer = Completer<Uint8List>();

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è
    reader.onLoadEnd.listen((_) {
      if (reader.result != null) {
        completer.complete(reader.result as Uint8List);
      } else {
        completer.completeError("Failed to read blob");
      }
    });

    // –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ Blob –∫–∞–∫ ArrayBuffer
    reader.readAsArrayBuffer(blob);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Future, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω—ã
    return completer.future;
  }

  Future<void> _saveToLocalStorage(Uint8List audioData) async {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Uint8List –≤ base64
    final base64Data = html.window.btoa(String.fromCharCodes(audioData));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    html.window.localStorage['saved_audio'] = base64Data;
  }

  String? getSavedAudio() {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
    final encodedData = html.window.localStorage['saved_audio'];
    if (encodedData != null) {
      return "data:audio/wav;base64,$encodedData";
    }
    return null;
  }
}